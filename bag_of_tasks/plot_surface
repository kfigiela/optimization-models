#!/usr/bin/env ruby
require 'yaml'
require 'ostruct'
require 'pp'
require 'erb'
require 'fileutils'
require 'monitor'

# IO.popen("/opt/local/bin/gnuplot", "w") do |gnuplot|
# IO.popen("/bin/cat", "w") do |gnuplot|
# IO.popen("/Users/kamilfigiela/Projekty/Cloud-REU-11/testy/model/gnuplot_pipe", "a") do |gnuplot|
begin
  gnuplot = $stdout
  gnuplot << <<-eos
  reset
  
  set grid
  set autoscale x
  set autoscale y
  set autoscale z


  set xrange [0:256]
  set yrange [0:40]
  set zrange [0:1000]

  set xlabel 'Data size (MB)'
  set ylabel 'Time limit (hours)'
  set zlabel 'Cost ($)'
  
  set palette color
  set palette model RGB
  set palette defined
  
  set view 60,230

  splot '-' title 'Optimal' with pm3d, '-' title "Storage switch" with line  

  eos
  plt1 = ""
  plt2 = ""
  plt3 = ""
  pswitch = ""
  
  Dir[ARGV[0]+"/*.yml"].sort_by {|f| /(\d+)/.match(f)[1].to_i }.each do |f|
    datasize = /(\d+)/.match(f)[1]
    $stderr.puts f
    data = File.open(f, "r") do |f| f.read end
    results = YAML.load data

    min = {}
    s3 = Array.new { |i| s3[i] = [nil,nil] }
    results["s3"].sort_by { |l| l[0] }.each do |info|
      plt1 << "#{datasize}\t#{info[0]}\t#{info[1].total_cost}\n"
      min[info[0]] = info[1].total_cost
      s3[info[0]] = [info[1].total_cost, nil]
    end
    plt1 << "\n"    
    results["cf"].sort_by { |l| l[0] }.each do |info|
      plt2 << "#{datasize}\t#{info[0]}\t#{info[1].total_cost}\n"
      min[info[0]] = info[1].total_cost if info[1].total_cost.to_f < min[info[0]].to_f
      if s3[info[0]]
        s3[info[0]][1] = info[1].total_cost
      end
    end
    plt2 << "\n"
    min.each do |k, v|
      plt3 << "#{datasize}\t#{k}\t#{v}\n"
    end
    
    switch = nil
    
    s3[1..-2].each_with_index do |val, i| 
      next if val.nil? or s3[i-1].nil? or s3[i+1].nil?
      begin
        if (s3[i-1][0]-s3[i-1][1])*(s3[i][0]-s3[i][1]) < 0.0
          switch = i
          # puts "switch: #{datasize} #{i}"
        end
      rescue TypeError
      rescue NoMethodError
      end
    end
    
    plt3 << "\n"
    pswitch << "#{datasize}\t#{switch}\t#{min[switch]}\n"
    
    # gnuplot.write "set term pdf monochrome\n"
    # gnuplot.write "set out \"#{input.sub("yml","pdf")}\"\n"
    # gnuplot.write plt
    # gnuplot.write "set term png size 800,480\n"
    # gnuplot.write "set out \"#{input.sub("yml","png")}\"\n"
    # gnuplot.write plt
    # puts "done"
  end
#  gnuplot << plt1 << "e\n" << plt2 << "e\n" << plt3 << "e\n"  
  gnuplot  << plt3 << "e\n"  
  gnuplot  << pswitch << "e\n"  
end
